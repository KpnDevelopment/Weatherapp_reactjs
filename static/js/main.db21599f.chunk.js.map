{"version":3,"sources":["api/fetchWeather.js","Componets/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","Weather","useState","setQuery","weather","setWeather","wc","setWc","search","e","key","console","log","className","Card","Row","InputGroup","size","Form","Control","type","placeholder","value","onChange","target","onKeyPress","style","width","Body","main","name","Badge","variant","sys","country","fontSize","Math","round","temp","color","temp_max","background","temp_min","Date","sunrise","toLocaleTimeString","sunset","moment","format","src","icon","alt","description","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db21599f.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst URL = \"https://api.openweathermap.org/data/2.5/weather\";\nconst API_KEY = \"fe10f6c6466908501f3c2d92528edc33\";\nexport const fetchWeather = async (query) => {\n  const { data } = await axios.get(URL, {\n    params: {\n      q: query,\n      units: \"metric\",\n      APPID: API_KEY,\n    },\n  });\n  return data;\n};\n","import React, { useState } from \"react\";\nimport { fetchWeather } from \"../api/fetchWeather\";\nimport \"./Weather.css\";\nimport moment from \"moment\";\nimport {\n  Container,\n  Row,\n  Col,\n  Badge,\n  Card,\n  Form,\n  InputGroup,\n} from \"react-bootstrap\";\n\nfunction Weather() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [wc, setWc] = useState(false); //umount and mount state wc=WeatherCard\n\n  const search = async (e) => {\n    if (e.key === \"Enter\") {\n      const data = await fetchWeather(query);\n      console.log(data);\n      setWeather(data);\n      setQuery(\"\");\n      setWc(!wc); //umount the weatherCard\n    }\n  };\n\n  return (\n    <div className=\"Weather\">\n      <Card className=\"main-container\">\n        <Row>\n          <InputGroup size=\"sm\">\n            <Form.Control\n              type=\"text\"\n              className=\"search\"\n              placeholder=\"Search..\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              onKeyPress={search}\n            />\n          </InputGroup>\n        </Row>\n        {/* mount umount the card */}\n        {wc && (\n          <Card\n            className=\"card\"\n            style={{\n              width: \"40rem\",\n            }}\n          >\n            <Card.Body className=\"card-body\">\n              {weather.main && (\n                <div className=\"city\">\n                  <h2 className=\"city-name\">\n                    <span>{weather.name}</span>\n                    <Badge className=\"country\" variant=\"warning\">\n                      {weather.sys.country}\n                    </Badge>\n                  </h2>\n                  <div className=\"city-temp\" style={{ fontSize: \"10rem\" }}>\n                    <span className=\"temp\">\n                      {Math.round(weather.main.temp)}\n                    </span>\n                    <Badge style={{ color: \"red\", fontSize: \"2rem\" }}>\n                      &deg;C\n                    </Badge>\n                    <div className=\"more-temp\">\n                      <h3>\n                        max:\n                        {Math.round(weather.main.temp_max)}\n                        <Badge\n                          style={{ background: \"none\", color: \"blue\" }}\n                          variant=\"secondary\"\n                        >\n                          &deg;C\n                        </Badge>\n                      </h3>\n                      <h3>\n                        min:\n                        {Math.round(weather.main.temp_min)}\n                        <Badge\n                          style={{ background: \"none\", color: \"blue\" }}\n                          variant=\"secondary\"\n                        >\n                          &deg;C\n                        </Badge>\n                      </h3>\n                    </div>\n                    <div className=\"sun\">\n                      <h4>\n                        Sunrise <br />{\" \"}\n                        {new Date(\n                          weather.sys.sunrise * 1000\n                        ).toLocaleTimeString(\"en-IN\")}\n                      </h4>\n                      <h4>\n                        Sunset <br />{\" \"}\n                        {new Date(weather.sys.sunset * 1000).toLocaleTimeString(\n                          \"en-IN\"\n                        )}\n                      </h4>\n                    </div>\n\n                    <h5>{moment().format(\"dddd\")}</h5>\n                    <h5>{moment().format(\"LL\")}</h5>\n                  </div>\n                  <div className=\"info\">\n                    <img\n                      src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n                      alt={weather.weather[0].description}\n                      className=\"city-icon\"\n                    />\n                    <h6>{weather.weather[0].description}</h6>\n                  </div>\n                </div>\n              )}\n            </Card.Body>\n          </Card>\n        )}\n      </Card>\n    </div>\n  );\n}\n\nexport default Weather;\n","import \"./App.css\";\nimport Weather from \"./Componets/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}